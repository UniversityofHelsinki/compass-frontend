image: docker:stable

stages:
    - test
    - build
    - dependency-track-sbom
    - dependency-track-submit
    - dependency-check
    - sonarqube-check
    - build-image

variables:
    # When you use the dind service, you must instruct Docker to talk with
    # the daemon started inside of the service. The daemon is available
    # with a network connection instead of the default
    # /var/run/docker.sock socket. Docker 19.03 does this automatically
    # by setting the DOCKER_HOST in
    # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
    #
    # Specify to Docker where to create the certificates. Docker
    # creates them automatically on boot, and creates
    # `/certs/client` to share between the service and job
    # container, thanks to volume mount from config.toml
    DOCKER_TLS_CERTDIR: '/certs'

services:
    - docker:dind

generate-sbom:
    stage: dependency-track-sbom
    image: node:22-alpine
    only:
        - main
    tags:
        - ohtu-build-4
    script:
        - npm ci
        - npx @cyclonedx/cyclonedx-npm --output-file sbom.xml
    artifacts:
        expire_in: 1h
        paths:
            - sbom.xml

submit-sbom:
    image: alpine:latest
    stage: dependency-track-submit
    only:
        - main
    tags:
        - ohtu-build-4
    dependencies:
        - generate-sbom
    before_script:
        - apk add --no-cache curl
    script:
        - "curl -X POST ${DTRACK_API_URL} -H 'Content-Type: multipart/form-data' -H 'X-Api-Key: '${DTRACK_API_KEY} -F 'projectName='${PROJECT_NAME} -F 'autoCreate=true' -F 'projectVersion='${PROJECT_VERSION} -F 'bom=@sbom.xml'"

sonarqube-check:
    stage: sonarqube-check
    tags:
        - ohtu-build-4
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: ['']
    variables:
        SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
        GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: '${CI_JOB_NAME}'
        paths:
            - .sonar/cache
    script:
        - sonar-scanner
    allow_failure: true
    only:
        - schedules
    needs:
        - job: dependency-check
          artifacts: true
        - job: test
          artifacts: true

dependency-check:
    stage: dependency-check
    only:
        - schedules
    tags:
        - ohtu-build-4
    allow_failure: true
    image:
        name: owasp/dependency-check-action:latest
        entrypoint: ['']
    script:
        - >
            /usr/share/dependency-check/bin/dependency-check.sh
            --project compass-frontend --scan . --enableExperimental
            --format HTML -nvdApiKey $NVD_API_KEY
    artifacts:
        when: always
        expire_in: 1 hour
        paths:
            - dependency-check-report.html

build_stage:
    stage: build
    image: node:22-alpine
    only:
        - main
    tags:
        - ohtu-build-4
    script:
        - npm ci --omit=dev
        - yes | cp -f -v .env.test .env.production || true
        - CI=false NODE_ENV=production npm run build
    artifacts:
        name: compass-build
        paths:
            - build
        expire_in: 1 hour

build_stage-prod:
    stage: build
    image: node:22-alpine
    only:
        - prod
    tags:
        - ohtu-build-4
    script:
        - npm ci --omit=dev
        - CI=false NODE_ENV=production npm run build
    artifacts:
        name: compass-build
        paths:
            - build
        expire_in: 1 hour

test:
    stage: test
    image: node:22-alpine
    tags:
        - ohtu-build-4
    script:
        - npm ci
        - npm run coverage
    artifacts:
        name: coverage-test
        paths:
            - coverage/

build_image:
    stage: build-image
    only:
        - main
    tags:
        - ohtu-build-4
    script:
        - echo "Logging into quay..."
        - echo $QUAY_PASSWORD | docker login -u $QUAY_USERNAME --password-stdin quay.io
        - echo "Building image..."
        - docker build -t compass-frontend .
        - echo "Tagging main image..."
        - docker tag compass-frontend quay.io/tike/compass-frontend:test
        - echo "Pushing main image..."
        - docker push quay.io/tike/compass-frontend:test

build_image-prod:
    stage: build-image
    only:
        - prod
    tags:
        - ohtu-build-4
    script:
        - echo "Logging into quay..."
        - echo $QUAY_PASSWORD | docker login -u $QUAY_USERNAME --password-stdin quay.io
        - echo "Building image..."
        - docker build -t compass-frontend .
        - echo "Tagging main image..."
        - docker tag compass-frontend quay.io/tike/compass-frontend:prod
        - echo "Pushing main image..."
        - docker push quay.io/tike/compass-frontend:prod
